// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}




model Profile{
  id String @id @default(uuid())
  userId String @unique
  name String 
  imageUrl String @db.Text
  email String @db.Text
  servers Server[]
  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Server{
  id String @id @default(uuid())
  name String 
  imageUrl String @db.Text
  invitedCode String @unique
  members Member[]
  channels Channel[]


  profileId String
  porfile Profile @relation(fields: [profileId], references:[id])
  

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([profileId])
}

enum MemberRole{
  ADMIN
  MODERATOR
  GUEST
}

model Member{
  id String @id @default(uuid())
  role MemberRole @default(GUEST)

  messages Message[]
  directmessages DirectMassage[]
 
 conversationsInitiated Conversation[] @relation("MemberOne")
 conversationsReceived Conversation[] @relation("MemberTwo")

  profileId String
  profile Profile @relation(fields: [profileId], references: [id])

  serverId String
  server Server @relation(fields: [serverId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}


enum ChannelType{
  TEXT
  AUDIO
  VIDEO
}



model Channel{
  id String @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  message Message[]
  profileId String
  profile Profile @relation(fields: [profileId], references: [id])

  serverId String
  server Server @relation(fields: [serverId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Message{
   id String @id @default(uuid())
   content String @db.Text
   fileUrl String? @db.Text

   memberId String
   member Member @relation(fields: [memberId], references: [id])

   channelId String
   channel Channel @relation(fields: [channelId], references: [id])

   deleted Boolean @default(false)

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   @@index([memberId])
   @@index([channelId])
}



model Conversation{
  id String  @id @default(uuid())

 directMessages DirectMassage[]
  memberOneId String
  memberOne Member @relation("MemberOne",fields: [memberOneId], references: [id])

  memberTwoId String
  memberTwo Member @relation("MemberTwo",fields: [memberTwoId], references: [id])

   @@index([memberOneId])
   @@index([memberTwoId])

  @@unique([memberOneId, memberTwoId])
}



model DirectMassage{
  id String @id @default(uuid())

  content String @db.Text
  fileUrl String @db.Text

  memberId String
  member Member @relation(fields: [memberId], references: [id])  

  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id])

  deleted Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}